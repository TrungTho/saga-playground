// Code generated by MockGen. DO NOT EDIT.
// Source: ./kafka/ (interfaces: KafkaOperations)
//
// Generated by this command:
//
//	mockgen -destination ./kafka/mock/kafkastore.go ./kafka/ KafkaOperations
//

// Package mock_kafkaclient is a generated GoMock package.
package mock_kafkaclient

import (
	context "context"
	reflect "reflect"

	kafkaclient "github.com/TrungTho/saga-playground/kafka"
	gomock "go.uber.org/mock/gomock"
)

// MockKafkaOperations is a mock of KafkaOperations interface.
type MockKafkaOperations struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaOperationsMockRecorder
	isgomock struct{}
}

// MockKafkaOperationsMockRecorder is the mock recorder for MockKafkaOperations.
type MockKafkaOperationsMockRecorder struct {
	mock *MockKafkaOperations
}

// NewMockKafkaOperations creates a new mock instance.
func NewMockKafkaOperations(ctrl *gomock.Controller) *MockKafkaOperations {
	mock := &MockKafkaOperations{ctrl: ctrl}
	mock.recorder = &MockKafkaOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaOperations) EXPECT() *MockKafkaOperationsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafkaOperations) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockKafkaOperationsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaOperations)(nil).Close))
}

// RegisterHandler mocks base method.
func (m *MockKafkaOperations) RegisterHandler(topicName string, newHandler kafkaclient.MessageHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHandler", topicName, newHandler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterHandler indicates an expected call of RegisterHandler.
func (mr *MockKafkaOperationsMockRecorder) RegisterHandler(topicName, newHandler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHandler", reflect.TypeOf((*MockKafkaOperations)(nil).RegisterHandler), topicName, newHandler)
}

// SubscribeTopics mocks base method.
func (m *MockKafkaOperations) SubscribeTopics(ctx context.Context, topicNames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeTopics", ctx, topicNames)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeTopics indicates an expected call of SubscribeTopics.
func (mr *MockKafkaOperationsMockRecorder) SubscribeTopics(ctx, topicNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeTopics", reflect.TypeOf((*MockKafkaOperations)(nil).SubscribeTopics), ctx, topicNames)
}
