services:
  db: # using 1 shared DB for simplicity, in prod each service should have its own dedicated DB
    container_name: saga-database
    image: debezium/postgres:14-alpine # customized image for logical replication and Debezium privilege
    restart: always
    user: postgres
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      PGUSER: ${DB_USER}
      POSTGRES_DB: ${ORDER_DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./data:/var/lib/postgresql/data
    ports:
      - ${DB_PORT}:${DB_PORT}
    networks:
      - saga-playground

  zookeeper:
    container_name: saga-zookeeper
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CONTAINER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
    # the below health check and depend on kafka service will guarantee zookeeper is ready to connect to, otherwise, kafka container will crash because zookeeper does not give up last controller yet
    healthcheck:
      test: ["CMD-SHELL", "nc -v -z -w 1s localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    ports:
      - ${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CONTAINER_PORT}
    volumes:
      - ./kafka-volume/data-zoo:/var/lib/zookeeper/data
      - ./kafka-volume/log-zoo:/var/lib/zookeeper/log
    networks:
      - saga-playground

  zoonavigator:
    container_name: saga-zookeeper-ui
    image: elkozmon/zoonavigator:1.1.2
    ports:
      - "${ZOONAVIGATOR_PORT}:8000"
    environment:
      HTTP_PORT: 8000
      AUTO_CONNECT_CONNECTION_STRING: zookeeper:${ZOOKEEPER_CONTAINER_PORT}
    networks:
      - saga-playground

  kafka-1:
    container_name: saga-kafka
    image: confluentinc/cp-kafka:7.4.4
    restart: on-failure
    # Overide entrypoint for bootstraping data & running the first active broker
    entrypoint: ["/bin/sh", "/home/kafka-bootstrap.sh"]
    depends_on:
      zookeeper:
        condition: service_healthy
        restart: true
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CONTAINER_PORT}
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # otherwise it will be 3, and debezium will fail to create new connector
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://saga-kafka:9092,PLAINTEXT_HOST://saga-kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: true
    volumes:
      - ./kafka-volume/data:/var/lib/kafka/data
      - ./kafka-bootstrap.sh:/home/kafka-bootstrap.sh
    networks:
      - saga-playground

  kafka-2:
    # profiles:
    #   - multi-broker # kafka multi-brokers set up, default only use a single broker for dev
    container_name: saga-kafka-replica
    restart: on-failure
    image: confluentinc/cp-kafka:7.4.4
    healthcheck:
      test: ["CMD-SHELL", "nc -v -z -w 1s localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    depends_on:
      zookeeper:
        condition: service_healthy
        restart: true
    ports:
      - 29093:29093
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CONTAINER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://saga-kafka-replica:9092,PLAINTEXT_HOST://saga-kafka-replica:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: true
    volumes:
      - ./kafka-volume/data2:/var/lib/kafka/data
    networks:
      - saga-playground

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
    volumes:
      - ./kafka-ui.config.yaml:/etc/kafkaui/dynamic_config.yaml
    networks:
      - saga-playground

  debezium-connector:
    container_name: debezium-connector
    image: debezium/connect:2.4.0.Final
    entrypoint: ["/bin/sh", "/debezium-bootstrap.sh"]
    # restart: on-failure
    ports:
      - "8083:8083"
    depends_on:
      kafka-2:
        condition: service_healthy
        restart: true
      db:
        condition: service_healthy
        restart: true
    environment:
      - BOOTSTRAP_SERVERS=saga-kafka-replica:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - CONFIG_STORAGE_REPLICATION_FACTOR=1
      - OFFSET_STORAGE_REPLICATION_FACTOR=1
      - STATUS_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_TOPIC_CREATION_ENABLE=false
    volumes:
      - ./cdc-configs/order.json:/saga-order-cdc-config.json
      - ./debezium-bootstrap.sh:/debezium-bootstrap.sh
    networks:
      - saga-playground

  debezium-ui:
    container_name: debezium-ui
    restart: on-failure
    image: quay.io/debezium/debezium-ui:1.7.2.Final
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CONNECT_URIS=http://debezium-connector:8083
    depends_on:
      - debezium-connector
    networks:
      - saga-playground
networks:
  saga-playground:
    driver: bridge
