services:
  db: # using 1 shared DB for simplicity, in prod each service should have its own dedicated DB
    container_name: saga-database
    image: postgres:12.6-alpine
    restart: always
    user: postgres
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      PGUSER: ${DB_USER}
      POSTGRES_DB: ${ORDER_DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - saga-playground

  zookeeper:
    container_name: saga-zookeeper
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    # the below health check and depend on kafka service will guarantee zookeeper is ready to connect to, otherwise, kafka container will crash because zookeeper does not give up last controller yet
    healthcheck:
      test: ["CMD-SHELL", "nc -v -z -w 1s localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    ports:
      - 22181:2181
    volumes:
      - ./kafka-volume/data-zoo:/var/lib/zookeeper/data
      - ./kafka-volume/log-zoo:/var/lib/zookeeper/log
    networks:
      - saga-playground

  kafka-1:
    container_name: saga-kafka
    image: confluentinc/cp-kafka:7.4.4
    restart: on-failure
    # Overide entrypoint for bootstraping data & running the first active broker
    entrypoint: ["/bin/sh", "/home/kafka-bootstrap.sh"]
    depends_on:
      zookeeper:
        condition: service_healthy
        restart: true
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://saga-kafka:9092,PLAINTEXT_HOST://saga-kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - ./kafka-volume/data:/var/lib/kafka/data
      - ./kafka-bootstrap.sh:/home/kafka-bootstrap.sh
    networks:
      - saga-playground

  kafka-2:
    # profiles:
    #   - multi-broker # kafka multi-brokers set up, default only use a single broker for dev
    container_name: saga-kafka-replica
    restart: on-failure
    image: confluentinc/cp-kafka:7.4.4
    healthcheck:
      test: ["CMD-SHELL", "nc -v -z -w 1s localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    depends_on:
      zookeeper:
        condition: service_healthy
        restart: true
    ports:
      - 29093:29093
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://saga-kafka-replica:9092,PLAINTEXT_HOST://saga-kafka-replica:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    volumes:
      - ./kafka-volume/data2:/var/lib/kafka/data
    networks:
      - saga-playground

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
    volumes:
      - ./kafka-ui.config.yaml:/etc/kafkaui/dynamic_config.yaml
    networks:
      - saga-playground

  debezium-connector:
    container_name: debezium-connector
    image: debezium/connect:2.4.0.Final
    # restart: on-failure
    ports:
      - "8083:8083"
    depends_on:
      kafka-2:
        condition: service_healthy
        restart: true
      db:
        condition: service_healthy
        restart: true
    environment:
      - BOOTSTRAP_SERVERS=saga-kafka-replica:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - CONFIG_STORAGE_REPLICATION_FACTOR=1
      - OFFSET_STORAGE_REPLICATION_FACTOR=1
      - STATUS_STORAGE_REPLICATION_FACTOR=1
      - ENABLE_DEBEZIUM_KC_REST_EXTENSION=true
      - ENABLE_DEBEZIUM_SCRIPTING=true
      # - CONNECT_REST_EXTENSION_CLASSES=io.debezium.kcrestextension.DebeziumConnectRestExtension,io.debezium.connector.postgresql.rest.DebeziumPostgresConnectRestExtension
    networks:
      - saga-playground

  debezium-ui:
    container_name: debezium-ui
    restart: on-failure
    image: quay.io/debezium/debezium-ui:1.7.2.Final
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CONNECT_URIS=http://debezium-connector:8083
    depends_on:
      - debezium-connector
    networks:
      - saga-playground
networks:
  saga-playground:
    driver: bridge
