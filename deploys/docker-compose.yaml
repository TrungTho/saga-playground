services:
  order-service:
    container_name: saga-order
    image: ghcr.io/trungtho/saga-playground/order-service:latest
    restart: on-failure
    ports:
      - ${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}
      - ${ORDER_SERVICE_GRPC_PORT}:${ORDER_SERVICE_GRPC_PORT}
    pull_policy: always
    # pull_policy: never
    volumes:
      - ./container.env:/container.env
    command: ["container.env"]
    depends_on:
      db:
        condition: service_healthy
        restart: true
      kafka-1:
        condition: service_healthy
        restart: true
    networks:
      - saga-playground

  checkout-service:
    container_name: saga-checkout
    image: ghcr.io/trungtho/saga-playground/checkout-service:latest
    restart: on-failure
    ports:
      - ${CHECKOUT_SERVICE_PORT}:${CHECKOUT_SERVICE_PORT}
    pull_policy: always
    # pull_policy: never
    env_file:
      - container.env
    depends_on:
      db:
        condition: service_healthy
        restart: true
      kafka-1:
        condition: service_healthy
        restart: true
    networks:
      - saga-playground

  # debugger:
  #   container_name: saga-debugger
  #   image: curlimages/curl
  #   restart: on-failure
  #   user: root
  #   networks:
  #     - saga-playground
  #   entrypoint: ["sleep", "1d"]

  db: # using 1 shared DB for simplicity, in prod each service should have its own dedicated DB
    container_name: saga-database
    image: debezium/postgres:14-alpine # customized image for logical replication and Debezium privilege
    restart: always
    user: postgres
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      PGUSER: ${DB_USER}
      POSTGRES_DB: ${ORDER_DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./data:/var/lib/postgresql/data
    ports:
      - ${DB_PORT}:${DB_PORT}
    networks:
      - saga-playground

  zookeeper:
    container_name: saga-zookeeper
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CONTAINER_PORT}
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"
    # the below health check and depend on kafka service will guarantee zookeeper is ready to connect to, otherwise, kafka container will crash because zookeeper does not give up last controller yet
    healthcheck:
      test: ["CMD-SHELL", "nc -v -z -w 1s localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    ports:
      - ${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CONTAINER_PORT}
    volumes:
      - ./kafka-volume/data-zoo:/var/lib/zookeeper/data
      - ./kafka-volume/log-zoo:/var/lib/zookeeper/log
    networks:
      - saga-playground

  zoonavigator:
    container_name: saga-zookeeper-ui
    image: elkozmon/zoonavigator:1.1.2
    ports:
      - "${ZOONAVIGATOR_PORT}:8000"
    environment:
      HTTP_PORT: 8000
      AUTO_CONNECT_CONNECTION_STRING: zookeeper:${ZOOKEEPER_CONTAINER_PORT}
    networks:
      - saga-playground

  kafka-1:
    container_name: saga-kafka
    image: confluentinc/cp-kafka:7.4.4
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "nc -v -z -w 1s localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    depends_on:
      zookeeper:
        condition: service_healthy
        restart: true
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CONTAINER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # otherwise it will be 3, and debezium will fail to create new connector
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://saga-kafka:9092,PLAINTEXT_HOST://saga-kafka:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: true
    volumes:
      - ./kafka-volume/data:/var/lib/kafka/data
    networks:
      - saga-playground

  kafka-2:
    # profiles:
    #   - multi-broker # kafka multi-brokers set up, default only use a single broker for dev
    container_name: saga-kafka-replica
    restart: on-failure
    image: confluentinc/cp-kafka:7.4.4
    healthcheck:
      test: ["CMD-SHELL", "nc -v -z -w 1s localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    depends_on:
      zookeeper:
        condition: service_healthy
        restart: true
    ports:
      - 29093:29093
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CONTAINER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://saga-kafka-replica:9092,PLAINTEXT_HOST://saga-kafka-replica:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: true
    volumes:
      - ./kafka-volume/data2:/var/lib/kafka/data
    networks:
      - saga-playground

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
    volumes:
      - ./kafka-ui.config.yaml:/etc/kafkaui/dynamic_config.yaml
    networks:
      - saga-playground

  debezium-connector:
    container_name: debezium-connector
    image: debezium/connect:2.4.0.Final
    # entrypoint: ["/bin/sh", "/debezium-bootstrap.sh"]
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl localhost:8083"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
    ports:
      - "8083:8083"
    depends_on:
      kafka-1:
        condition: service_healthy
        restart: true
      db:
        condition: service_healthy
        restart: true
    environment:
      - BOOTSTRAP_SERVERS=saga-kafka-replica:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - CONFIG_STORAGE_REPLICATION_FACTOR=1
      - OFFSET_STORAGE_REPLICATION_FACTOR=1
      - STATUS_STORAGE_REPLICATION_FACTOR=1
      - CONNECT_TOPIC_CREATION_ENABLE=false
    networks:
      - saga-playground

  debezium-ui:
    container_name: debezium-ui
    restart: on-failure
    image: quay.io/debezium/debezium-ui:1.7.2.Final
    ports:
      - "${DEBEZIUM_UI_PORT}:8080"
    environment:
      - KAFKA_CONNECT_URIS=http://debezium-connector:8083
    depends_on:
      debezium-connector:
        condition: service_healthy
        restart: true
    networks:
      - saga-playground

  bootstrapping-container:
    container_name: bootstrapping
    image: confluentinc/cp-kafka:7.4.4
    entrypoint: ["/bin/sh", "/bootstrap.sh"]
    depends_on:
      kafka-1:
        condition: service_healthy
        restart: true
      debezium-connector:
        condition: service_healthy
        restart: true
    volumes:
      - ./bootstrap.sh:/bootstrap.sh
      - ./cdc-configs/order.json:/saga-order-cdc-config.json
    networks:
      - saga-playground

networks:
  saga-playground:
    driver: bridge
